$(function() {
	var getQuery = location.search.replace('?','');
	if (getQuery.length > 0) {
		$("input:text[name='txtCardNo']").val(getQuery.replace('@@', ' '));
		getQuery += '############';
		process(getQuery);
	}	

	var keyword = $('input[type=button]').click(function() {
		if ($(this).val() == '清除') {
			$("input:checkbox:checked[name='Type']").each(function(i) {$(this).prop("checked", false);}); 
			$("input:checkbox:checked[name='Class']").each(function(i) {$(this).prop("checked", false);}); 
			$("input:checkbox:checked[name='Stars']").each(function(i) {$(this).prop("checked", false);}); 
			$("input:radio[name='Cost']").filter("[value='All']").prop('checked', true);
			$("input:checkbox:checked[name='sockets']").each(function(i) {$(this).prop("checked", false);}); 
			$("input:checkbox:checked[name='drops']").each(function(i) {$(this).prop("checked", false);}); 
			$("input:text[name='txtCardNo']").val('');
			$('#result').empty().append([$('<div>無搜尋結果</div>')]);
			$('#result').show();
			return ;
		}
		var q = $(this).prev().val().replaceAll(' ', '@@');

		var arrValue = new Array();  
		$('input:checkbox:checked[name="Type"]').each(function(i) { arrValue[i] = this.value; });
		var TypeValue = GetArrToStr(arrValue);
		
		arrValue = new Array(); 
		$('input:checkbox:checked[name="Class"]').each(function(i) { arrValue[i] = this.value; });
		var ClassValue = GetArrToStr(arrValue);    
		
		arrValue = new Array(); 
		$('input:checkbox:checked[name="Stars"]').each(function(i) { arrValue[i] = this.value; });
		var StarsValue = GetArrToStr(arrValue); 
		
		var CostValue = $("input[name='Cost']:checked").val();
		
		arrValue = new Array();
		$('input:checkbox:checked[name="sockets"]').each(function(i) { arrValue[i] = this.value; });
		var socketsValue = GetArrToStr(arrValue);  		
		
		arrValue = new Array(); 
		$('input:checkbox:checked[name="drops"]').each(function(i) { arrValue[i] = this.value; });
		var dropsValue = GetArrToStr(arrValue); 

		if ((TypeValue == '') 
			&& (ClassValue == '') 
			&& (StarsValue == '') 
			&& (CostValue == 'All') 
			&& (socketsValue == '') 			
			&& (dropsValue == '') 
			&& (q.trim() == '')) {
			$('#result').empty();
			$('#result').hide();
			return;  
		}

		q = q + '##' + TypeValue + '##' + ClassValue + '##' + StarsValue + '##' + CostValue.replace('All','') + '##' + socketsValue + '##' + dropsValue;
		// alert(q);
		process(q);
	}).prev().on('keydown', function(e) {
		if (e.keyCode != 13) {
			return;
		}
		$(this).next().click();
	});
	
	String.prototype.replaceAll = function(search, replacement) {
		var target = this;
		return target.split(search).join(replacement);
	};

	function Icon(id) {
		if (id=='0000')
			return '<img class="icon" src="icon/icon_arror.jpg">';
		var book = 'http://i.imgur.com/yAeWlIP.png';
		var url1 = id == -1 ? book : 'https://onepiece-treasurecruise.com/wp-content/uploads/f' + ('0000' + id).substr(-4) + '.png';
		var url2 = id == -1 ? book : 'https://gamewith.akamaized.net/article_tools/onepiece/gacha/f' + ('0000' + id).substr(-4) + '.png';
		return '<img class="icon" src="' + url1 + '" onerror=\"this.src=\''+ url2 + '\'\">';
	}

	function process(q) {
		var arrq = q.split('##');
		// alert(q);
		var sub = []; 
		sub = [
			$('<div>'),
			$('<table style="width:80%; bo">'),      
		];			
		
		$.each(window.units, function(o) {
			var CardNo = o + 1;
			try {
				if (IsEqual(CardNo, arrq[0], 'CardNo')
					&& IsEqual(window.units[o][1], arrq[1], 'Type')
					&& IsEqual(window.units[o][2], arrq[2], 'Class')
					&& IsEqual(window.units[o][3], arrq[3], 'Stars')
					&& ChkCost(window.units[o][4], arrq[4]) // Cost
					&& IsEqual(window.units[o][6], arrq[5], 'sockets')
					&& ChkDrops(CardNo, arrq[6]) // drops
				) {		
					var arr = [
						$('<tr>'),
						$('<td width="5%" align="center" valign="middle" nowrap>ID</td>'), 
						$('<td width="5%" align="center" valign="middle" nowrap>圖像</td>'),
						$('<td width="5%" align="center" valign="middle" nowrap>屬性</td>'),
						$('<td width="6%" align="center" valign="middle" nowrap>Type</td>'),
						$('<td width="2%" align="center" valign="middle" nowrap>★數</td>'),
						$('<td width="5%" align="center" valign="middle" nowrap>cost</td>'),
						$('<td width="2%" align="center" valign="middle" nowrap>插槽數</td>'),
						$('<td width="7%" align="center" valign="middle" nowrap>最大等級</td>'),
						$('<td width="8%" align="center" valign="middle" nowrap>體力<br>攻擊<br>回復</td>'),
						$('<td width="7%" align="center" valign="middle" nowrap>技能CD</td>'),
						$('<td width="16%" align="center" valign="middle" nowrap>角色取得方式</td>'),
						$('<td width="16%" align="center" valign="middle" nowrap>必殺技<br>練等關卡</td>'),
						$('<td width="16%" align="center" valign="middle" nowrap>可練解放關卡</td>'),
						$('</tr>'),
						$('<tr>'),
						$('<td align="center" valign="middle">').text(CardNo),
						$('<td align="center" valign="middle">' + Icon(CardNo) + '</td>'),
						$(SetTypeStyle(window.units[o][1])),
						$(SetClassStyle(window.units[o][2])),					
						$('<td align="center" valign="middle">').text(window.units[o][3]),
						$('<td align="center" valign="middle">').text(window.units[o][4]),
						$('<td align="center" valign="middle">').text(window.units[o][6]),
						$('<td align="center" valign="middle">').text(window.units[o][7]),
						$(GetStatus(window.units[o][12], window.units[o][13], window.units[o][14])),
						$(GetSkillCD(window.cooldowns[o])),
						$('<td>').text(GetData(CardNo, 'TO_GET')),
						$('<td>').text(GetData(CardNo, 'BOOK')),
						$('<td>').text(GetData(CardNo, 'LIBERATION')),
						$('</tr>'),    
						$(GetTR('必殺技', GetData(CardNo, 'SKILL_DESC'))),
						$(GetTR('船長效果', GetData(CardNo, 'CAP_DESC'))),
						$(GetTR('船員效果', GetData(CardNo, 'CREW_DESC'))),
						$(GetEvolutions('進化素材', CardNo)),					
					];
					
					sub = sub.concat(arr);
				}
			} catch (e) {
				alert(CardNo + ', ' + e.toString());
			}
		});
		sub = sub.concat($('</table>'));
		sub = sub.concat($('</div>'));
	  
		$('#result').empty().append(sub);
		$('#result').show();
	}

	function SetTypeStyle(o) {

		var bgcolor = "";
		var fcolot = "";
		var str = "";
		switch(o) {
			case 'STR':
				str = "力";
				bgcolor = "red";
				fcolor = "white";
				break;
			case 'QCK':
				str = "速";
				bgcolor = "blue";
				fcolor = "white";
				break;
			case 'DEX':
				str = "技";
				bgcolor = "green";
				fcolor = "white";
				break;
			case 'PSY':
				str = "心";
				bgcolor = "yellow";
				fcolor = "black";
				break;
			case 'INT':
				str = "知";
				bgcolor = "purple";
				fcolor = "white";
				break;
		}
		return '<td bgcolor="' + bgcolor + '" align="center" valign="middle"><font color="' + fcolor + '">' + str + '</font></td>';
	}	
	
	function SetClassStyle(o) {

		var str = "";
		try {
			$.each(o, function(data) {
				str += o[data] + ' ';
			});
		} catch (e) {			
			str = o;
		}
		str = str.replace('Fighter', '格鬪').replace('Slasher', '斬擊');
		str = str.replace('Striker', '打突').replace('Shooter', '射擊');
		str = str.replace('Free Spirit', '自由').replace('Cerebral', '博識');
		str = str.replace('Driven', '野心').replace('Powerhouse', '強韌');		
				
		return '<td align="center" valign="middle">' + str + '</td>';
	}

	function GetSkillCD(o) {
		var LV1 = 0;
		var LVMAX = 0;
		if (o==null)
			return '<td></td>';
		else {
			try {
				$.each(o, function(data) {
					if (data==0)
						LV1 = parseInt(o[data]);
					else
						LVMAX = parseInt(o[data]);
				});
			} catch (e) {			
				LV1 = parseInt(o);
			}
		}
			
		if (LVMAX == 0)
			return '<td align="center" valign="middle">' + LV1 + '</td>';
		else 
			return '<td align="center" valign="middle">' + LV1 + '<br> ↓ <br>' + LVMAX + '</td>';
	}

	function GetStatus(HP, ATK, CURE) {
		return '<td align="center" valign="middle">' + HP + '<br>' + ATK + '<br>' + CURE + '</td>';
	}

	function GetTR(TITLE, VALUE) {
		var str = '<tr>';
		str += '<td align="left" valign="middle" colspan="3">' + TITLE + '</td>';
		str += '<td colspan="10">' + VALUE + '</td>';
		str += '</tr>';
		return str;
	}
	
	function GetEvolutions(TITLE, VALUE) {
		var str = '<tr>';
		str += '<td align="left" valign="middle" colspan="3">' + TITLE + '</td>';		
		str += '<td colspan="10">';

		var icon = '';
		$.each(window.evolutions, function(i, data) {
			if (i==VALUE) {	
				for (var i in data.evolvers) {
					if (data.evolvers[i].length > 0) {
						for (var j in data.evolvers[i]) {
							icon += Icon(data.evolvers[i][j]);
						}
						if (icon.length > 0) 
							icon += Icon('0000') + Icon(data.evolution[i]) + '<br>';					
					} else {
						icon += Icon(data.evolvers[i]);
					}					
				}
				icon += Icon('0000') + Icon(data.evolution);
			}				
		});	
		str += icon;
		str += '</td>';	
		str += '</tr>';
		
		if (icon == '')
			str = '';				
		return str;
	}

	function IsEqual(A, B, kind) {
		if (B.trim() == '') 
			return true;	 	
		if (A == null)
			return false;
		var arrB = B.split('@@');
		for(i = 0;i < arrB.length; i++) {  	
			if (arrB[i].trim() == '') 
				continue;			
			switch(kind) {
				case 'CardNo':
				case 'sockets':
					if (A == parseInt(arrB[i]))
						return true;
					break;
				case 'Stars':
					if (A.toString() == arrB[i])
						return true;
					break;
				default:
					if(A.indexOf(arrB[i]) > -1 && arrB[i].length > 0) 
						return true;				
			}
		}    
		return false;
	}

	function ChkCost(A, kind) {	
		if (kind == 'less20') {			
			return A <= 20;
		} else if(kind == 'over50') {
			return A >= 50;
		} else {
			return true;
		}			
	}
	
	function ChkDrops(id, kind) {
		if (isNaN(id) || kind == '') 
			return true;	

		for (var type in window.drops) {
			switch(type) {
				case 'Story Island':
				case 'Fortnight':
				case 'Raid':
					if (type==kind.trim()) {
						for (var island=0;island<window.drops[type].length;++island) {
							for (var stage in window.drops[type][island]) {
								if (stage == 'thumb' || stage == 'name' || stage == 'shortName' || stage == 'day' || stage == 'global' || stage == 'condition' || stage == 'completion' || stage == 'challenge' || stage == 'challengeData' || stage == 'showManual' || stage == 'gamewith' || stage == 'teamDatabase') continue;
								if (window.drops[type][island][stage].indexOf(id) != -1) {
									return true;									
								}	
							}						
						}
					}
					break;
				case 'Special':
					for (var island=0;island<window.drops[type].length;++island) {
						if (window.drops[type][island].name == kind.trim()) {
							for (var stage in window.drops[type][island]) {
								if (stage == 'thumb' || stage == 'name' || stage == 'shortName' || stage == 'day' || stage == 'global' || stage == 'condition' || stage == 'completion' || stage == 'challenge' || stage == 'challengeData' || stage == 'showManual' || stage == 'gamewith' || stage == 'teamDatabase') continue;
								if (window.drops[type][island][stage].indexOf(id) != -1) {
									return true;									
								}	
							}
						}
												
					}
					break;
			}			
		}
		return false;
	}
	
	function GetData(id, kind) {
		for (var data in window.CData) {				
			if (window.CData[data]["CARD_NO"]==('0000' + id.toString()).substr(-4)) {
				return window.CData[data][kind];
			}			
		}
		return '';
	}

	function GetArrToStr(A) {
		var rtnValue = '';
		for(i = 0;i < A.length; i++) {
			if (rtnValue.length > 0)
				rtnValue += '@@';
			rtnValue += A[i];
		}
		return rtnValue;
	}
});